{"version":3,"sources":["webpack://settings-frontend/./src/constants.js","webpack://settings-frontend/./src/store/reducers.js","webpack://settings-frontend/./src/api.js","webpack://settings-frontend/./src/actions.js","webpack://settings-frontend/./src/PresentationalComponents/PlainTextWithLinks.js","webpack://settings-frontend/./src/PresentationalComponents/RenderForms.js","webpack://settings-frontend/./src/SmartComponents/Applications/Applications.js"],"names":["asyncActions","flatMap","a","ACTION_TYPES","keyBy","k","applicationsStore","applyReducerHash","GET_SCHEMA_FULFILLED","store","payload","schema","loaded","GET_SCHEMA_PENDING","SAVE_VALUES_FULFILLED","GET_CONFIG_PENDING","appsConfig","configLoaded","GET_CONFIG_FULFILLED","getConfig","instance","insights","chrome","isBeta","config","safeLoad","getApplicationSchema","application","apiVersion","saveValues","values","getSchema","type","GET_SCHEMA","appTitle","SAVE_VALUES","save","meta","notifications","fulfilled","variant","title","description","dismissable","PlainTextWithLinks","text","linkProps","linkIx","items","split","reduce","acc","curr","slice","length","Text","key","rel","className","component","TextVariants","target","propTypes","PropTypes","isRequired","componentMapperExtended","componentMapper","componentTypes","renderStatus","selected","options","validatorMapperBridge","validatorMapper","validatorTypes","FormTemplateWrapper","props","submitLabel","canReset","RenderForms","schemas","Stack","gutter","map","i","StackItem","Card","CardBody","FormTemplate","onSubmit","Skeleton","size","appId","defaultProps","getAppId","params","id","Applications","match","currApp","appName","frontend","useState","undefined","isOrgAdmin","setIsOrgAdmin","useEffect","register","reducers","auth","getUser","then","user","identity","is_org_admin","api","apiName","PageHeader","Main","NotAuthorized","serviceName","connect","dispatch","GET_CONFIG","versions","currVersion"],"mappings":"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","file":"js/Applications.9b562196c274e887079f.js","sourcesContent":["import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst actions = [];\n\nconst asyncActions = flatMap(\n  ['GET_SCHEMA', 'SAVE_VALUES', 'GET_CONFIG'],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nexport const ACTION_TYPES = keyBy([...actions, ...asyncActions], (k) => k);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport { ACTION_TYPES } from '../constants';\n\nexport const defaultState = { loaded: false, configLoaded: false };\n\nexport const loading = (store) => {\n  return {\n    ...store,\n    loaded: false,\n    schema: [],\n  };\n};\n\nexport const getSchema = (store, { payload }) => {\n  return {\n    ...store,\n    schema: payload,\n    loaded: true,\n  };\n};\n\nexport const getConfig = (store, { payload }) => {\n  return {\n    ...store,\n    appsConfig: payload,\n    configLoaded: true,\n  };\n};\n\nexport default {\n  applicationsStore: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_SCHEMA_FULFILLED]: getSchema,\n      [ACTION_TYPES.GET_SCHEMA_PENDING]: loading,\n      [ACTION_TYPES.SAVE_VALUES_FULFILLED]: (store) => ({ ...store }),\n      [ACTION_TYPES.GET_CONFIG_PENDING]: (store) => ({\n        ...store,\n        appsConfig: {},\n        configLoaded: false,\n      }),\n      [ACTION_TYPES.GET_CONFIG_FULFILLED]: getConfig,\n    },\n    defaultState\n  ),\n};\n","import instance from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport { safeLoad } from 'js-yaml';\n\nexport const getConfig = async () => {\n  const config = await instance.get(\n    `${insights.chrome.isBeta() ? '/beta' : ''}/config/main.yml`\n  );\n  return safeLoad(config);\n};\n\nexport const getApplicationSchema = async (application, apiVersion = 'v1') =>\n  instance.get(`/api/${application}/${apiVersion}/settings`);\n\nexport const saveValues = async (application, values, apiVersion = 'v1') =>\n  instance.post(`/api/${application}/${apiVersion}/settings/`, { ...values });\n","import {\n  getApplicationSchema,\n  saveValues as save,\n  getConfig as config,\n} from './api';\nimport { ACTION_TYPES } from './constants';\n\nexport const getSchema = (application, apiVersion) => ({\n  type: ACTION_TYPES.GET_SCHEMA,\n  payload: getApplicationSchema(application, apiVersion),\n});\n\nexport const saveValues = (\n  application,\n  values,\n  apiVersion,\n  appTitle = 'Red Hat Insights'\n) => ({\n  type: ACTION_TYPES.SAVE_VALUES,\n  payload: save(application, values, apiVersion),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Application settings saved',\n        description: `Settings for ${appTitle} were replaced with new values.`,\n        dismissable: true,\n      },\n    },\n  },\n});\n\nexport const getConfig = () => ({\n  type: ACTION_TYPES.GET_CONFIG,\n  payload: config(),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\n\nexport const PlainTextWithLinks = ({ text, linkProps }) => {\n  let linkIx = 0;\n  const items = text.split(/<link>/).reduce((acc, curr) => {\n    let slice = curr.split(/<\\/link>/);\n    if (slice.length === 2) {\n      slice[0] = (\n        <Text\n          key={`link-${linkIx}`}\n          rel=\"noreferrer noopener\"\n          className=\"pf-u-ml-md\"\n          component={TextVariants.a}\n          target=\"_blank\"\n          {...linkProps[linkIx]}\n        >\n          {slice[0]}\n        </Text>\n      );\n      linkIx++;\n    }\n\n    return [...acc, ...slice];\n  }, []);\n  return <Text component={TextVariants.p}>{items}</Text>;\n};\n\nPlainTextWithLinks.propTypes = {\n  text: PropTypes.string.isRequired,\n  linkProps: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components';\nimport { Stack, StackItem, Card, CardBody } from '@patternfly/react-core';\nimport { PlainTextWithLinks } from './PlainTextWithLinks';\n\nimport FormRender from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nconst componentMapperExtended = {\n  ...componentMapper,\n  'switch-field': componentMapper[componentTypes.SWITCH],\n  'textarea-field': componentMapper[componentTypes.TEXTAREA],\n  'select-field': componentMapper[componentTypes.SELECT],\n  'plain-text-with-links': PlainTextWithLinks,\n  [componentTypes.DUAL_LIST_SELECT]: {\n    component: componentMapper[componentTypes.DUAL_LIST_SELECT],\n    renderStatus: ({ selected, options }) =>\n      `${selected} of ${options} selected`,\n  },\n};\n\nconst validatorMapperBridge = {\n  'required-validator': validatorMapper[validatorTypes.REQUIRED],\n  'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n  'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n  'url-validator': validatorMapper[validatorTypes.URL],\n  'max-length-validator': validatorMapper[validatorTypes.MAX_LENGTH],\n  'min-items-validator': validatorMapper[validatorTypes.MIN_ITEMS],\n  'exact-length-validator': validatorMapper[validatorTypes.EXACT_LENGTH],\n};\n\nconst FormTemplateWrapper = (props) => (\n  <FormTemplate {...props} submitLabel=\"Save\" canReset />\n);\n\nconst RenderForms = ({ schemas, loaded, saveValues, ...props }) => (\n  <Stack {...props} gutter=\"md\">\n    {loaded ? (\n      schemas.map((schema, i) => (\n        <StackItem key={`settings-form-${i}`}>\n          <Card>\n            <CardBody>\n              <FormRender\n                componentMapper={componentMapperExtended}\n                FormTemplate={FormTemplateWrapper}\n                schema={schema}\n                submitLabel=\"Save\"\n                onSubmit={saveValues}\n                validatorMapper={validatorMapperBridge}\n              />\n            </CardBody>\n          </Card>\n        </StackItem>\n      ))\n    ) : (\n      <StackItem>\n        <Card>\n          <CardBody>\n            <Skeleton size=\"lg\" />\n          </CardBody>\n        </Card>\n      </StackItem>\n    )}\n  </Stack>\n);\n\nRenderForms.propTypes = {\n  schemas: PropTypes.arrayOf(PropTypes.shape({})),\n  loaded: PropTypes.bool,\n  appId: PropTypes.string,\n  saveValues: PropTypes.func,\n};\n\nRenderForms.defaultProps = {\n  saveValues: () => undefined,\n};\n\nexport default RenderForms;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Skeleton,\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n  NotAuthorized,\n} from '@redhat-cloud-services/frontend-components';\nimport { register } from '../../store';\nimport reducers from '../../store/reducers';\nimport { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getSchema, saveValues, getConfig } from '../../actions';\nimport { RenderForms } from '../../PresentationalComponents';\nimport { startCase } from 'lodash';\n\nexport const getAppId = ({ params } = {}) => {\n  return (params && params.id) || '';\n};\n\nconst Applications = ({\n  appsConfig,\n  saveValues,\n  match,\n  getSchema,\n  getConfig,\n  configLoaded,\n  loaded,\n  schema,\n}) => {\n  const currApp =\n    (appsConfig && appsConfig[getAppId(match)]) || getAppId(match);\n  const appName =\n    (currApp.frontend && currApp.frontend.title) || currApp.title || currApp;\n  const [isOrgAdmin, setIsOrgAdmin] = useState(undefined);\n\n  useEffect(() => {\n    register(reducers);\n    register({ notifications });\n    if (!appsConfig) {\n      getConfig();\n    }\n\n    insights.chrome.auth\n      .getUser()\n      .then((user) => setIsOrgAdmin(user.identity.user.is_org_admin));\n  }, []);\n\n  useEffect(() => {\n    if (currApp && typeof currApp !== 'string') {\n      getSchema(currApp?.api?.apiName || match.params.id, currApp.api);\n    }\n  }, [currApp]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <React.Fragment>\n          <PageHeaderTitle\n            title={isOrgAdmin ? 'Applications settings' : startCase(appName)}\n          />\n          {isOrgAdmin &&\n            (configLoaded ? (\n              <p className=\"pf-u-mt-sm\">{`Settings for ${startCase(\n                appName\n              )}`}</p>\n            ) : (\n              <Skeleton size=\"sm\" />\n            ))}\n        </React.Fragment>\n      </PageHeader>\n      {typeof isOrgAdmin === 'boolean' && (\n        <Main>\n          {isOrgAdmin ? (\n            <RenderForms\n              loaded={loaded}\n              schemas={schema}\n              saveValues={(values) =>\n                saveValues(\n                  currApp?.api?.apiName || match.params.id,\n                  values,\n                  currApp.api,\n                  currApp.title\n                )\n              }\n            />\n          ) : (\n            <NotAuthorized serviceName={startCase(appName)} />\n          )}\n        </Main>\n      )}\n    </React.Fragment>\n  );\n};\n\nApplications.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n  appsConfig: PropTypes.shape({\n    [PropTypes.string]: PropTypes.shape({\n      title: PropTypes.string,\n      frontend: PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    }),\n  }),\n  configLoaded: PropTypes.bool,\n  getSchema: PropTypes.func,\n  loaded: PropTypes.bool,\n  saveValues: PropTypes.func,\n  getConfig: PropTypes.func,\n  schema: PropTypes.arrayOf(PropTypes.object),\n};\n\nfunction mapStateToProps({ applicationsStore }) {\n  return {\n    schema: applicationsStore && applicationsStore.schema,\n    loaded: applicationsStore && applicationsStore.loaded,\n    appsConfig: applicationsStore && applicationsStore.appsConfig,\n    configLoaded: applicationsStore && applicationsStore.configLoaded,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getConfig: () => dispatch(getConfig()),\n    getSchema: (application, { versions: [currVersion] } = { versions: [] }) =>\n      dispatch(getSchema(application, currVersion)),\n    saveValues: (\n      application,\n      values,\n      { versions: [currVersion] } = { versions: [] },\n      appTitle\n    ) => dispatch(saveValues(application, values, currVersion, appTitle)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Applications);\n"],"sourceRoot":""}