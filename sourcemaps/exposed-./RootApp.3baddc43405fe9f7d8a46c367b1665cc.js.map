{"version":3,"file":"js/exposed-./RootApp.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0LAQA,MAyBA,EAzBY,KACV,MAAM,oBAAEA,EAAmB,GAAEC,IAAO,SAcpC,OAbAD,IAAsB,yCACtB,IAAAE,YAAU,KACRD,EAAG,kBAAmBE,IAChBA,EAAMC,UACRC,QAAQC,KACN,IACEC,SAASC,SAASC,SAAS,gBAAkB,gBAAkB,KAC9DN,EAAMO,QAEb,GACA,GACD,CAACT,IAGF,kBAAC,aAAc,KACb,kBAAC,KAAmB,MACpB,kBAAC,IAAkB,KACjB,kBAAC,IAAM,OAGZ,C,wJCtBH,MAAMU,EAAW,IACf,kBAAC,KAAQ,CAACC,MAAO,iBACf,kBAAC,EAAAC,cAAa,CAACC,UAAU,OAAYC,OAAOR,SAASC,SAAU,IAC7D,kBAAC,EAAAQ,EAAG,QAKVL,EAASM,UAAY,CACnBC,OAAQ,UAGV,S,gICbA,MAAMC,EAAc,CAClB,IAAK,KAGDC,EAAgB,CACpB,kBAAmB,4BAGfC,EAAqB,EAAGC,eAC5B,MAAMC,GAAY,SAAY,EAAGC,cAAgBD,gBAAkBA,KAC7D,SAAEf,IAAa,IAAAiB,eACfC,GAAW,UAQjB,IANA,IAAAxB,YAAU,KACJqB,GACFG,EAAS,CAAEC,KAAM,IAAWC,aAASC,GACvC,GACC,CAACrB,IAEAe,EAAW,CACb,MAAMO,EAAQX,EAAYI,GACpBQ,EACJX,EACEY,OAAOC,KAAKb,GAAec,MAAMC,GAAQ3B,EAASC,SAAS0B,OACxD,WACP,OAAO,kBAACL,EAAK,CAACM,YAAaL,GAC7B,CAEA,OAAOT,CAAQ,EAGjBD,EAAmBJ,UAAY,CAC7BK,SAAU,SAAee,YAG3B,S,gFCvCA,MAAMC,GAAe,IAAAC,OAAK,IACxB,wDASWC,EAAS,IAElB,kBAAC,EAAAC,OAAM,KACL,kBAAC,EAAAC,MAAK,CAACC,OAAK,EAACC,KANH,oBAM6BC,UAAWP,IAClD,kBAAC,EAAAI,MAAK,CAACI,OAAQ,IAAM,kBAAC,EAAAC,SAAQ,CAACC,GAAG,4B,wFCdxC,MAEMC,E,MAAe,GACnB,CAAC,aAAc,cAAe,eAC7BC,GAAM,CAACA,EAAG,GAAGA,YAAa,GAAGA,cAAe,GAAGA,gBAGrCC,EAAe,IAAM,IAAgBF,IAAgBG,GAAMA,IAE3DC,EAAY,W,qGCVzB,MAIA,GACE,CAAC,KALmB,CAACC,GAAK1B,cAAc,CACxCL,UAAWK,K,uBCKb,MAAM2B,EAAW,IAAIC,EAAA,GAAgB,CAAC,EAAG,CACvC,MACA,EAAAC,EAAA,SACI1C,OAAO2C,SAASC,OAAOC,OAAS,GAAK,CAAC,OASrC,SAASC,KAAYC,GAC1B,OAAOP,EAASM,YAAYC,EAC9B,CARAP,EAASM,SAAS,CAAErC,cAAc,QAAiBA,KAUnD,S","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/PresentationalComponents/shared/ErrorReducerCatcher.js","webpack:///./src/Routes.js","webpack:///./src/constants.js","webpack:///./src/store/errorReducer.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport ErroReducerCatcher from './PresentationalComponents/shared/ErrorReducerCatcher';\n\nimport './App.scss';\n\nconst App = () => {\n  const { updateDocumentTitle, on } = useChrome();\n  updateDocumentTitle?.('Applications Settings - Applications');\n  useEffect(() => {\n    on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(\n          `/${\n            location.pathname.includes('applications') ? 'applications/' : ''\n          }${event.navId}`\n        );\n      }\n    });\n  }, [on]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <ErroReducerCatcher>\n        <Routes />\n      </ErroReducerCatcher>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst Settings = () => (\n  <Provider store={registry.getStore()}>\n    <BrowserRouter basename={getBaseName(window.location.pathname, 1)}>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nSettings.propTypes = {\n  logger: PropTypes.func,\n};\n\nexport default Settings;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../../constants';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst sectionTitles = {\n  'cost-management': 'Cost Management settings',\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name =\n      sectionTitles[\n        Object.keys(sectionTitles).find((key) => pathname.includes(key))\n      ] || 'Settings';\n    return <State serviceName={name} />;\n  }\n\n  return children;\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { lazy } from 'react';\n\nconst Applications = lazy(() =>\n  import(\n    /* webpackChunkName: \"ApplicationsPage\" */ './SmartComponents/Applications/Applications'\n  )\n);\n\nconst paths = {\n  applications: '/applications/:id',\n};\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route exact path={paths.applications} component={Applications} />\n      <Route render={() => <Redirect to=\"/applications/advisor\" />} />\n    </Switch>\n  );\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst actions = [];\n\nconst asyncActions = flatMap(\n  ['GET_SCHEMA', 'SAVE_VALUES', 'GET_CONFIG'],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nexport const ACTION_TYPES = keyBy([...actions, ...asyncActions], (k) => k);\n\nexport const API_ERROR = 'API_ERROR';\n","import { API_ERROR } from '../constants';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nexport default {\n  [API_ERROR]: setErrorState,\n};\n","import ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport errorReducer from './errorReducer';\nimport logger from 'redux-logger';\n\nconst registry = new ReducerRegistry({}, [\n  promiseMiddleware,\n  notificationsMiddleware(),\n  ...(window.insights.chrome.isProd ? [] : [logger]),\n]);\n\nregistry.register({ errorReducer: applyReducerHash(errorReducer) });\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n\nexport default registry;\n"],"names":["updateDocumentTitle","on","useEffect","event","domEvent","history","push","location","pathname","includes","navId","Settings","store","BrowserRouter","basename","window","A","propTypes","logger","errorStates","sectionTitles","ErroReducerCatcher","children","errorCode","errorReducer","useLocation","dispatch","type","payload","undefined","State","name","Object","keys","find","key","serviceName","isRequired","Applications","lazy","Routes","Switch","Route","exact","path","component","render","Redirect","to","asyncActions","a","ACTION_TYPES","k","API_ERROR","_","registry","ReducerRegistry","notificationsMiddleware","insights","chrome","isProd","register","args"],"sourceRoot":""}