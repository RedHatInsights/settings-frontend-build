{"version":3,"file":"js/550.f82dd23b7df00b7d4b77.js","mappings":"8PAGMA,GAAeC,EAAAA,EAAAA,OAAK,kBACxB,4EASWC,EAAS,WACpB,OACE,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KANH,oBAM6BC,UAAWP,IAClD,kBAAC,EAAAI,MAAD,CAAOI,OAAQ,kBAAM,kBAAC,EAAAC,SAAD,CAAUC,GAAG,+B,iCCVlCC,EAAc,CAClB,IAAKC,EAAAA,GAGDC,EAAgB,CACpB,kBAAmB,4BAGfC,EAAqB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACtBC,GAAYC,EAAAA,EAAAA,cAAY,qBAAGC,aAAgBF,aACzCG,GAAaC,EAAAA,EAAAA,eAAbD,SACFE,GAAWC,EAAAA,EAAAA,eAQjB,IANAC,EAAAA,EAAAA,YAAU,WACJP,GACFK,EAAS,CAAEG,KAAMC,EAAAA,EAAWC,aAASC,MAEtC,CAACR,IAEAH,EAAW,CACb,IAAMY,EAAQjB,EAAYK,GACpBa,EACJhB,EACEiB,OAAOC,KAAKlB,GAAemB,MAAK,SAACC,GAAD,OAASd,EAASe,SAASD,QACxD,WACP,OAAO,kBAACL,EAAD,CAAOO,YAAaN,IAG7B,OAAOd,GAGTD,EAAmBsB,UAAY,CAC7BrB,SAAUsB,IAAAA,KAAAA,YAGZ,U,IChCMC,EAAAA,SAAAA,I,siBACJ,WAAoB,WACVC,EAAYC,KAAKC,MAAjBF,QACRG,SAASC,OAAOC,OAChBF,SAASC,OAAOE,KAAKC,UAAUC,MAAK,SAACC,GAAD,OAClC,EAAKC,SAAS,CACZC,WAAW,EACXC,QAASH,EAAKI,SAASJ,KAAKK,kBAGhCX,SAASC,OAAOW,YAAY,gBAC5Bd,KAAKe,WAAab,SAASC,OAAOa,GAAG,kBAAkB,SAACC,GAClDA,EAAMC,UACRnB,EAAQoB,KAAR,WAEIC,SAASzC,SAASe,SAAS,gBAAkB,gBAAkB,IAFnE,OAGKuB,EAAMI,a,oBAMjB,WACE,OACE,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,kBAAC,EAAD,KACE,kBAAC3D,EAAD,CAAQ4D,WAAYtB,KAAKC,c,EA3B7BH,CAAYyB,EAAAA,WAkClBzB,EAAIF,UAAY,CACdG,QAASF,IAAAA,QAGX,SAAe2B,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,UAAAA,CAAU3B,K,uFC3C9B4B,E,MAAeC,EAAAA,CACnB,CAAC,aAAc,cAAe,eAC9B,SAACC,GAAD,MAAO,CAACA,EAAD,UAAOA,EAAP,sBAAuBA,EAAvB,wBAAyCA,EAAzC,iBAGIC,EAAeC,GAAAA,CAAM,GAAD,OAPjB,IAOiB,OAAiBJ,KAAe,SAACK,GAAD,OAAOA,KAE3D9C,EAAY,a,yHCNzB,SAAe,UACZA,EAAAA,GALmB,SAAC+C,EAAD,SAAqB,CACzCxD,UADoB,EAAMU,Y,wBCMtB+C,EAAW,IAAIC,EAAAA,GAAgB,GAApB,CACfC,KACAC,EAAAA,EAAAA,OAFe,eAGXC,OAAOnC,SAASC,OAAOmC,OAAS,GAAK,CAACC,QASrC,SAASC,IACd,OAAOP,EAASO,SAAT,MAAAP,EAAQ,WAPjBA,EAASO,SAAS,CAAE9D,cAAc+D,EAAAA,EAAAA,IAAiB/D,KAUnD","sources":["webpack:///./src/Routes.js","webpack:///./src/PresentationalComponents/shared/ErrorReducerCatcher.js","webpack:///./src/App.js","webpack:///./src/constants.js","webpack:///./src/store/errorReducer.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Route, Switch, Redirect } from 'react-router-dom';\nimport React, { lazy } from 'react';\n\nconst Applications = lazy(() =>\n  import(\n    /* webpackChunkName: \"ApplicationsPage\" */ './SmartComponents/Applications/Applications'\n  )\n);\n\nconst paths = {\n  applications: '/applications/:id',\n};\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route exact path={paths.applications} component={Applications} />\n      <Route render={() => <Redirect to=\"/applications/advisor\" />} />\n    </Switch>\n  );\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../../constants';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst sectionTitles = {\n  'cost-management': 'Cost Management settings',\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name =\n      sectionTitles[\n        Object.keys(sectionTitles).find((key) => pathname.includes(key))\n      ] || 'Settings';\n    return <State serviceName={name} />;\n  }\n\n  return children;\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport ErroReducerCatcher from './PresentationalComponents/shared/ErrorReducerCatcher';\n\nimport './App.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    const { history } = this.props;\n    insights.chrome.init();\n    insights.chrome.auth.getUser().then((user) =>\n      this.setState({\n        userReady: true,\n        isAdmin: user.identity.user.is_org_admin,\n      })\n    );\n    insights.chrome.identifyApp('applications');\n    this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(\n          `/${\n            location.pathname.includes('applications') ? 'applications/' : ''\n          }${event.navId}`\n        );\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NotificationsPortal />\n        <ErroReducerCatcher>\n          <Routes childProps={this.props} />\n        </ErroReducerCatcher>\n      </React.Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default withRouter(connect()(App));\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst actions = [];\n\nconst asyncActions = flatMap(\n  ['GET_SCHEMA', 'SAVE_VALUES', 'GET_CONFIG'],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nexport const ACTION_TYPES = keyBy([...actions, ...asyncActions], (k) => k);\n\nexport const API_ERROR = 'API_ERROR';\n","import { API_ERROR } from '../constants';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nexport default {\n  [API_ERROR]: setErrorState,\n};\n","import ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport errorReducer from './errorReducer';\nimport logger from 'redux-logger';\n\nconst registry = new ReducerRegistry({}, [\n  promiseMiddleware,\n  notificationsMiddleware(),\n  ...(window.insights.chrome.isProd ? [] : [logger]),\n]);\n\nregistry.register({ errorReducer: applyReducerHash(errorReducer) });\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n\nexport default registry;\n"],"names":["Applications","lazy","Routes","Switch","Route","exact","path","component","render","Redirect","to","errorStates","NotAuthorized","sectionTitles","ErroReducerCatcher","children","errorCode","useSelector","errorReducer","pathname","useLocation","dispatch","useDispatch","useEffect","type","API_ERROR","payload","undefined","State","name","Object","keys","find","key","includes","serviceName","propTypes","PropTypes","App","history","this","props","insights","chrome","init","auth","getUser","then","user","setState","userReady","isAdmin","identity","is_org_admin","identifyApp","unregister","on","event","domEvent","push","location","navId","childProps","Component","withRouter","connect","asyncActions","flatMap","a","ACTION_TYPES","keyBy","k","_","registry","ReducerRegistry","promiseMiddleware","notificationsMiddleware","window","isProd","logger","register","applyReducerHash"],"sourceRoot":""}