{"version":3,"file":"js/897.03d4ef59c58c5d459353.js","mappings":"8PAGMA,GAAeC,EAAAA,EAAAA,OAAK,kBACxB,2EASWC,EAAS,WACpB,OACE,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KANH,oBAM6BC,UAAWP,IAClD,kBAAC,EAAAI,MAAD,CAAOI,OAAQ,kBAAM,kBAAC,EAAAC,SAAD,CAAUC,GAAG,gC,eCRlCC,EAAAA,SAAAA,I,siBACJ,WAAoB,WACVC,EAAYC,KAAKC,MAAjBF,QACRG,SAASC,OAAOC,OAChBF,SAASC,OAAOE,KAAKC,UAAUC,MAAK,SAACC,GAAD,OAClC,EAAKC,SAAS,CACZC,WAAW,EACXC,QAASH,EAAKI,SAASJ,KAAKK,kBAGhCX,SAASC,OAAOW,YAAY,gBAC5Bd,KAAKe,WAAab,SAASC,OAAOa,GAAG,kBAAkB,SAACC,GAClDA,EAAMC,UACRnB,EAAQoB,KAAR,WAEIC,SAASC,SAASC,SAAS,gBAAkB,gBAAkB,IAFnE,OAGKL,EAAMM,a,oBAMjB,WACE,OACE,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,kBAAClC,EAAD,CAAQmC,WAAYxB,KAAKC,a,EA1B3BH,CAAY2B,EAAAA,WAgClB3B,EAAI4B,UAAY,CACd3B,QAAS4B,IAAAA,QAGX,SAAeC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,UAAAA,CAAU/B,K,+CC1ChCgC,E,qDAEG,SAAS1B,IACd,GAAI0B,EACF,MAAM,IAAIC,MAAM,6BAFgB,2BAAZC,EAAY,yBAAZA,EAAY,gBAWlC,OANAF,EAAW,IAAIG,EAAAA,GAAgB,GAApB,CACTC,KACAC,EAAAA,EAAAA,OAFS,eAGNH,EAAWI,QAAO,SAACC,GAAD,YAA0B,IAATA,QAUnC,SAASC,IAAkB,MAChC,OAAO,EAAAR,GAASQ,SAAT","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Route, Switch, Redirect } from 'react-router-dom';\nimport React, { lazy } from 'react';\n\nconst Applications = lazy(() =>\n  import(\n    /* webpackChunkName: \"ApplicationsPage\" */ './SmartComponents/Applications/Applications'\n  )\n);\n\nconst paths = {\n  applications: '/applications/:id',\n};\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route exact path={paths.applications} component={Applications} />\n      <Route render={() => <Redirect to=\"/applications/insights\" />} />\n    </Switch>\n  );\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport './App.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    const { history } = this.props;\n    insights.chrome.init();\n    insights.chrome.auth.getUser().then((user) =>\n      this.setState({\n        userReady: true,\n        isAdmin: user.identity.user.is_org_admin,\n      })\n    );\n    insights.chrome.identifyApp('applications');\n    this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(\n          `/${\n            location.pathname.includes('applications') ? 'applications/' : ''\n          }${event.navId}`\n        );\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NotificationsPortal />\n        <Routes childProps={this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default withRouter(connect()(App));\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nlet registry;\n\nexport function init(...middleware) {\n  if (registry) {\n    throw new Error('store already initialized');\n  }\n\n  registry = new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware(),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["Applications","lazy","Routes","Switch","Route","exact","path","component","render","Redirect","to","App","history","this","props","insights","chrome","init","auth","getUser","then","user","setState","userReady","isAdmin","identity","is_org_admin","identifyApp","unregister","on","event","domEvent","push","location","pathname","includes","navId","childProps","Component","propTypes","PropTypes","withRouter","connect","registry","Error","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","filter","item","register"],"sourceRoot":""}