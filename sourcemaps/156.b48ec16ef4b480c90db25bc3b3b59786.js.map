{"version":3,"file":"js/156.c65cdaafc9a07b94619b.js","mappings":"4NAGMA,GAAeC,EAAAA,EAAAA,OAAK,kBACxB,sDADwB,IAUbC,EAAS,WACpB,OACE,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KANH,oBAM6BC,UAAWP,IAClD,kBAAC,EAAAI,MAAD,CAAOI,OAAQ,kBAAM,kBAAC,EAAAC,SAAD,CAAUC,GAAG,yBAAnB,IAGpB,E,4CCbKC,EAAc,CAClB,IAAKC,EAAAA,GAGDC,EAAgB,CACpB,kBAAmB,4BAGfC,EAAqB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACtBC,GAAYC,EAAAA,EAAAA,KAAY,qBAAGC,aAAgBF,SAAnB,IACtBG,GAAaC,EAAAA,EAAAA,eAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAQjB,IANAC,EAAAA,EAAAA,YAAU,WACJP,GACFK,EAAS,CAAEG,KAAMC,EAAAA,EAAWC,aAASC,GAExC,GAAE,CAACR,IAEAH,EAAW,CACb,IAAMY,EAAQjB,EAAYK,GACpBa,EACJhB,EACEiB,OAAOC,KAAKlB,GAAemB,MAAK,SAACC,GAAD,OAASd,EAASe,SAASD,EAA3B,MAC7B,WACP,OAAO,kBAACL,EAAD,CAAOO,YAAaN,GAC5B,CAED,OAAOd,CACR,EAEDD,EAAmBsB,UAAY,CAC7BrB,SAAUsB,IAAAA,KAAAA,YAGZ,UCTA,EAzBY,WACV,OAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,GAc7B,OAbAD,SAAAA,EAAsB,yCACtBhB,EAAAA,EAAAA,YAAU,WACRiB,EAAG,kBAAkB,SAACC,GAChBA,EAAMC,UACRC,QAAQC,KAAR,WAEIC,SAAS1B,SAASe,SAAS,gBAAkB,gBAAkB,IAFnE,OAGKO,EAAMK,OAGd,GACF,GAAE,CAACN,IAGF,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,kBAAC,EAAD,KACE,kBAACtC,EAAD,OAIP,E,eCvBK6C,EAAW,kBACf,kBAAC,KAAD,CAAUC,MAAOC,EAAAA,GAAAA,YACf,kBAAC,EAAAC,cAAD,CAAeC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOR,SAAS1B,SAAU,IAC7D,kBAAC,EAAD,OAHW,EAQjB4B,EAASX,UAAY,CACnBkB,OAAQjB,IAAAA,MAGV,UChBAkB,IAAAA,OAAgB,kBAAC,EAAD,MAAcC,SAASC,eAAe,Q,sGCChDC,E,MAAeC,GACnB,CAAC,aAAc,cAAe,eAC9B,SAACC,GAAD,MAAO,CAACA,EAAD,UAAOA,EAAP,sBAAuBA,EAAvB,wBAAyCA,EAAzC,aAAP,IAGWC,EAAeC,IAAM,GAAD,OAPjB,IAOiB,OAAiBJ,KAAe,SAACK,GAAD,OAAOA,CAAP,IAEpDtC,EAAY,W,uICNzB,SAAe,UACZA,EAAAA,GALmB,SAACuC,EAAD,SAAqB,CACzChD,UADoB,EAAMU,QAAN,I,wBCMhBuB,EAAW,IAAIgB,EAAAA,GAAgB,CAAC,EAArB,CACfC,KACAC,EAAAA,EAAAA,OAFe,eAGXd,OAAOe,SAASC,OAAOC,OAAS,GAAK,CAAChB,QASrC,SAASiB,IACd,OAAOtB,EAASsB,SAAT,MAAAtB,EAAQ,UAChB,CARDA,EAASsB,SAAS,CAAErD,cAAcsD,EAAAA,EAAAA,IAAiBtD,KAUnD,S","sources":["webpack:///./src/Routes.js","webpack:///./src/PresentationalComponents/shared/ErrorReducerCatcher.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/constants.js","webpack:///./src/store/errorReducer.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { lazy } from 'react';\n\nconst Applications = lazy(() =>\n  import(\n    /* webpackChunkName: \"ApplicationsPage\" */ './SmartComponents/Applications/Applications'\n  )\n);\n\nconst paths = {\n  applications: '/applications/:id',\n};\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route exact path={paths.applications} component={Applications} />\n      <Route render={() => <Redirect to=\"/applications/advisor\" />} />\n    </Switch>\n  );\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { useLocation } from 'react-router-dom';\nimport { API_ERROR } from '../../constants';\n\nconst errorStates = {\n  403: NotAuthorized,\n};\n\nconst sectionTitles = {\n  'cost-management': 'Cost Management settings',\n};\n\nconst ErroReducerCatcher = ({ children }) => {\n  const errorCode = useSelector(({ errorReducer: { errorCode } }) => errorCode);\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorCode) {\n      dispatch({ type: API_ERROR, payload: undefined });\n    }\n  }, [pathname]);\n\n  if (errorCode) {\n    const State = errorStates[errorCode];\n    const name =\n      sectionTitles[\n        Object.keys(sectionTitles).find((key) => pathname.includes(key))\n      ] || 'Settings';\n    return <State serviceName={name} />;\n  }\n\n  return children;\n};\n\nErroReducerCatcher.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErroReducerCatcher;\n","import React, { useEffect } from 'react';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport ErroReducerCatcher from './PresentationalComponents/shared/ErrorReducerCatcher';\n\nimport './App.scss';\n\nconst App = () => {\n  const { updateDocumentTitle, on } = useChrome();\n  updateDocumentTitle?.('Applications Settings - Applications');\n  useEffect(() => {\n    on('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        history.push(\n          `/${\n            location.pathname.includes('applications') ? 'applications/' : ''\n          }${event.navId}`\n        );\n      }\n    });\n  }, [on]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <ErroReducerCatcher>\n        <Routes />\n      </ErroReducerCatcher>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst Settings = () => (\n  <Provider store={registry.getStore()}>\n    <BrowserRouter basename={getBaseName(window.location.pathname, 1)}>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nSettings.propTypes = {\n  logger: PropTypes.func,\n};\n\nexport default Settings;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Settings from './AppEntry';\n\nReactDOM.render(<Settings />, document.getElementById('root'));\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst actions = [];\n\nconst asyncActions = flatMap(\n  ['GET_SCHEMA', 'SAVE_VALUES', 'GET_CONFIG'],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nexport const ACTION_TYPES = keyBy([...actions, ...asyncActions], (k) => k);\n\nexport const API_ERROR = 'API_ERROR';\n","import { API_ERROR } from '../constants';\n\nconst setErrorState = (_, { payload }) => ({\n  errorCode: payload,\n});\n\nexport default {\n  [API_ERROR]: setErrorState,\n};\n","import ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport errorReducer from './errorReducer';\nimport logger from 'redux-logger';\n\nconst registry = new ReducerRegistry({}, [\n  promiseMiddleware,\n  notificationsMiddleware(),\n  ...(window.insights.chrome.isProd ? [] : [logger]),\n]);\n\nregistry.register({ errorReducer: applyReducerHash(errorReducer) });\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n\nexport default registry;\n"],"names":["Applications","lazy","Routes","Switch","Route","exact","path","component","render","Redirect","to","errorStates","NotAuthorized","sectionTitles","ErroReducerCatcher","children","errorCode","useSelector","errorReducer","pathname","useLocation","dispatch","useDispatch","useEffect","type","API_ERROR","payload","undefined","State","name","Object","keys","find","key","includes","serviceName","propTypes","PropTypes","useChrome","updateDocumentTitle","on","event","domEvent","history","push","location","navId","Settings","store","registry","BrowserRouter","basename","getBaseName","window","logger","ReactDOM","document","getElementById","asyncActions","flatMap","a","ACTION_TYPES","keyBy","k","_","ReducerRegistry","promiseMiddleware","notificationsMiddleware","insights","chrome","isProd","register","applyReducerHash"],"sourceRoot":""}