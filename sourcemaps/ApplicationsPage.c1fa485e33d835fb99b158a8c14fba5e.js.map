{"version":3,"file":"js/ApplicationsPage.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/store/applicationReducer.js","webpack:///./src/api.js","webpack:///./src/PresentationalComponents/PlainTextWithLinks.js","webpack:///./src/PresentationalComponents/ErrState.js","webpack:///./src/PresentationalComponents/RenderForms.js","webpack:///./src/SmartComponents/Applications/Applications.js","webpack:///./src/actions.js"],"sourcesContent":["import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from '../constants';\n\nexport const defaultState = { loaded: false, configLoaded: false, error: null };\n\nexport const loading = (store) => {\n  return {\n    ...store,\n    loaded: false,\n    schema: [],\n  };\n};\n\nexport const getSchema = (store, { payload }) => {\n  return {\n    ...store,\n    schema: payload,\n    loaded: true,\n  };\n};\n\nexport const getConfig = (store, { payload }) => {\n  return {\n    ...store,\n    appsConfig: payload,\n    configLoaded: true,\n  };\n};\n\nexport const getSchemaRejected = (store) => ({\n  ...store,\n  error: true,\n});\n\nexport default {\n  applicationsStore: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_SCHEMA_FULFILLED]: getSchema,\n      [ACTION_TYPES.GET_SCHEMA_PENDING]: loading,\n      [ACTION_TYPES.GET_SCHEMA_REJECTED]: getSchemaRejected,\n      [ACTION_TYPES.SAVE_VALUES_FULFILLED]: (store) => ({ ...store }),\n      [ACTION_TYPES.GET_CONFIG_PENDING]: (store) => ({\n        ...store,\n        appsConfig: {},\n        configLoaded: false,\n      }),\n      [ACTION_TYPES.GET_CONFIG_FULFILLED]: getConfig,\n    },\n    defaultState\n  ),\n};\n","import axios from 'axios';\nimport {\n  authInterceptor,\n  errorInterceptor,\n  interceptor401,\n  interceptor500,\n  responseDataInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { load } from 'js-yaml';\n\nimport registry from './store';\nimport { API_ERROR } from './constants';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst axiosInstance = axios.create();\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\n\naxiosInstance.interceptors.response.use(null, interceptor401);\naxiosInstance.interceptors.response.use(null, interceptor403);\naxiosInstance.interceptors.response.use(null, interceptor500);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nexport const getConfig = async () => {\n  const config = await axiosInstance.get(\n    `/api/chrome-service/v1/static/${\n      insights.chrome.isBeta() ? '/beta' : 'stable'\n    }/${insights.chrome.isProd() ? 'prod' : 'stage'}/main.yml`\n  );\n  return load(config);\n};\n\nexport const getApplicationSchema = async (application, apiVersion = 'v1') =>\n  axiosInstance.get(`/api/${application}/${apiVersion}/settings`);\n\nexport const saveValues = async (application, values, apiVersion = 'v1') =>\n  axiosInstance.post(`/api/${application}/${apiVersion}/settings/`, {\n    ...values,\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\n\nexport const PlainTextWithLinks = ({ text, linkProps }) => {\n  let linkIx = 0;\n  const items = text.split(/<link>/).reduce((acc, curr) => {\n    let slice = curr.split(/<\\/link>/);\n    if (slice.length === 2) {\n      slice[0] = (\n        <Text\n          key={`link-${linkIx}`}\n          rel=\"noreferrer noopener\"\n          className=\"pf-u-ml-md\"\n          component={TextVariants.a}\n          target=\"_blank\"\n          {...linkProps[linkIx]}\n        >\n          {slice[0]}\n        </Text>\n      );\n      linkIx++;\n    }\n\n    return [...acc, ...slice];\n  }, []);\n  return <Text component={TextVariants.p}>{items}</Text>;\n};\n\nPlainTextWithLinks.propTypes = {\n  text: PropTypes.string.isRequired,\n  linkProps: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nexport const ErrState = ({ errorTitle, errorDescription }) => {\n  return (\n    <ErrorState\n      errorTitle={errorTitle}\n      errorDescription={\n        <div dangerouslySetInnerHTML={{ __html: errorDescription }} />\n      }\n    />\n  );\n};\n\nErrState.propTypes = {\n  errorTitle: propTypes.string,\n  errorDescription: propTypes.string,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Card, CardBody, Stack, StackItem } from '@patternfly/react-core';\nimport { PlainTextWithLinks } from './PlainTextWithLinks';\nimport { ErrState } from './ErrState';\n\nimport FormRender from '@data-driven-forms/react-form-renderer/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/validator-mapper';\nimport DualListSortButton from '@data-driven-forms/pf4-component-mapper/dual-list-sort-button';\n\nconst componentMapperExtended = {\n  ...componentMapper,\n  'switch-field': componentMapper[componentTypes.SWITCH],\n  'textarea-field': componentMapper[componentTypes.TEXTAREA],\n  'select-field': componentMapper[componentTypes.SELECT],\n  'plain-text-with-links': PlainTextWithLinks,\n  'error-state': ErrState,\n  [componentTypes.DUAL_LIST_SELECT]: {\n    component: componentMapper[componentTypes.DUAL_LIST_SELECT],\n    isFilterable: true,\n    isSortable: true,\n    isSearchable: true,\n    resolveProps: (props) => ({\n      ...(props.leftTitle && { availableOptionsTitle: props.leftTitle }),\n      ...(props.rightTitle && { chosenOptionsTitle: props.rightTitle }),\n    }),\n    availableOptionsActions: [\n      <DualListSortButton position=\"left\" key=\"sort\" />,\n    ],\n    chosenOptionsActions: [<DualListSortButton position=\"right\" key=\"sort\" />],\n  },\n};\n\nconst validatorMapperBridge = {\n  'required-validator': validatorMapper[validatorTypes.REQUIRED],\n  'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n  'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n  'url-validator': validatorMapper[validatorTypes.URL],\n  'max-length-validator': validatorMapper[validatorTypes.MAX_LENGTH],\n  'min-items-validator': validatorMapper[validatorTypes.MIN_ITEMS],\n  'exact-length-validator': validatorMapper[validatorTypes.EXACT_LENGTH],\n};\n\nconst FormTemplateWrapper = (props) => (\n  <FormTemplate\n    {...props}\n    submitLabel=\"Save\"\n    canReset\n    {...props.schema.formProps}\n  />\n);\n\nconst RenderForms = ({ schemas, loaded, saveValues, ...props }) => {\n  const [initialValues, setInitialValues] = useState();\n  return (\n    <Stack {...props} hasGutter>\n      {loaded ? (\n        schemas.map((schema, i) => (\n          <StackItem key={`settings-form-${i}`}>\n            <Card>\n              <CardBody>\n                <FormRender\n                  componentMapper={componentMapperExtended}\n                  FormTemplate={FormTemplateWrapper}\n                  schema={schema}\n                  submitLabel=\"Save\"\n                  onSubmit={(values, formApi) => {\n                    setInitialValues(values);\n                    formApi.initialize(values);\n                    return saveValues(values);\n                  }}\n                  initialValues={initialValues}\n                  validatorMapper={validatorMapperBridge}\n                />\n              </CardBody>\n            </Card>\n          </StackItem>\n        ))\n      ) : (\n        <StackItem>\n          <Card>\n            <CardBody>\n              <Skeleton size=\"lg\" />\n            </CardBody>\n          </Card>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nRenderForms.propTypes = {\n  schemas: PropTypes.arrayOf(PropTypes.shape({})),\n  loaded: PropTypes.bool,\n  appId: PropTypes.string,\n  saveValues: PropTypes.func,\n};\n\nRenderForms.defaultProps = {\n  saveValues: () => undefined,\n};\n\nFormTemplateWrapper.propTypes = {\n  schema: PropTypes.object,\n};\n\nexport default RenderForms;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\n\nimport { register } from '../../store';\nimport applicationReducer from '../../store/applicationReducer';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getConfig, getSchema, saveValues } from '../../actions';\nimport { RenderForms } from '../../PresentationalComponents';\nimport startCase from 'lodash/startCase';\n\nexport const getAppId = ({ params } = {}) => {\n  return (params && params.id) || '';\n};\n\nconst Applications = ({\n  appsConfig,\n  saveValues,\n  match,\n  getSchema,\n  getConfig,\n  configLoaded,\n  loaded,\n  schema,\n  hasError,\n}) => {\n  const currApp =\n    (appsConfig && appsConfig[getAppId(match)]) || getAppId(match);\n  const appName =\n    (currApp.frontend && currApp.frontend.title) || currApp.title || currApp;\n  const [isOrgAdmin, setIsOrgAdmin] = useState(undefined);\n\n  useEffect(() => {\n    register(applicationReducer);\n    register({ notifications: notificationsReducer });\n    if (!appsConfig) {\n      getConfig();\n    }\n\n    insights.chrome.auth\n      .getUser()\n      .then((user) => setIsOrgAdmin(user.identity.user.is_org_admin));\n  }, []);\n\n  useEffect(() => {\n    if (currApp && typeof currApp !== 'string') {\n      getSchema(currApp?.api?.apiName || match.params.id, currApp.api);\n    }\n  }, [currApp]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <React.Fragment>\n          <PageHeaderTitle\n            title={isOrgAdmin ? 'Applications settings' : startCase(appName)}\n          />\n          {isOrgAdmin &&\n            (configLoaded ? (\n              <p className=\"pf-u-mt-sm\">{`Settings for ${startCase(\n                appName\n              )}`}</p>\n            ) : (\n              <Skeleton size=\"sm\" />\n            ))}\n        </React.Fragment>\n      </PageHeader>\n      {typeof isOrgAdmin === 'boolean' && !hasError && (\n        <Main>\n          {isOrgAdmin ? (\n            <RenderForms\n              loaded={loaded}\n              schemas={schema}\n              saveValues={(values) =>\n                saveValues(\n                  currApp?.api?.apiName || match.params.id,\n                  values,\n                  currApp.api,\n                  currApp.title\n                )\n              }\n            />\n          ) : (\n            <NotAuthorized serviceName={startCase(appName)} />\n          )}\n        </Main>\n      )}\n      {hasError && <ErrorState />}\n    </React.Fragment>\n  );\n};\n\nApplications.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n  appsConfig: PropTypes.shape({\n    [PropTypes.string]: PropTypes.shape({\n      title: PropTypes.string,\n      frontend: PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    }),\n  }),\n  configLoaded: PropTypes.bool,\n  getSchema: PropTypes.func,\n  loaded: PropTypes.bool,\n  saveValues: PropTypes.func,\n  getConfig: PropTypes.func,\n  schema: PropTypes.arrayOf(PropTypes.object),\n  hasError: PropTypes.bool,\n};\n\nfunction mapStateToProps({ applicationsStore }) {\n  return {\n    schema: applicationsStore && applicationsStore.schema,\n    loaded: applicationsStore && applicationsStore.loaded,\n    appsConfig: applicationsStore && applicationsStore.appsConfig,\n    configLoaded: applicationsStore && applicationsStore.configLoaded,\n    hasError: applicationsStore && applicationsStore.error,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getConfig: () => dispatch(getConfig()),\n    getSchema: (application, { versions: [currVersion] } = { versions: [] }) =>\n      dispatch(getSchema(application, currVersion)),\n    saveValues: (\n      application,\n      values,\n      { versions: [currVersion] } = { versions: [] },\n      appTitle\n    ) => dispatch(saveValues(application, values, currVersion, appTitle)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Applications);\n","import {\n  getConfig as config,\n  getApplicationSchema,\n  saveValues as save,\n} from './api';\nimport { ACTION_TYPES } from './constants';\n\nexport const getSchema = (application, apiVersion) => ({\n  type: ACTION_TYPES.GET_SCHEMA,\n  payload: getApplicationSchema(application, apiVersion),\n});\n\nexport const saveValues = (\n  application,\n  values,\n  apiVersion,\n  appTitle = 'Red Hat Insights'\n) => ({\n  type: ACTION_TYPES.SAVE_VALUES,\n  payload: save(application, values, apiVersion),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Application settings saved',\n        description: `Settings for ${appTitle} were replaced with new values.`,\n        dismissable: true,\n      },\n    },\n  },\n});\n\nexport const getConfig = () => ({\n  type: ACTION_TYPES.GET_CONFIG,\n  payload: config(),\n});\n"],"names":["applicationsStore","GET_SCHEMA_FULFILLED","store","payload","schema","loaded","GET_SCHEMA_PENDING","GET_SCHEMA_REJECTED","error","SAVE_VALUES_FULFILLED","GET_CONFIG_PENDING","appsConfig","configLoaded","GET_CONFIG_FULFILLED","axiosInstance","axios","create","interceptors","request","use","response","status","dispatch","type","async","config","get","insights","chrome","isBeta","isProd","getApplicationSchema","application","apiVersion","saveValues","values","post","PlainTextWithLinks","text","linkProps","linkIx","items","split","reduce","acc","curr","slice","length","Text","key","rel","className","component","a","target","p","propTypes","isRequired","ErrState","errorTitle","errorDescription","ErrorState","dangerouslySetInnerHTML","__html","componentMapperExtended","SWITCH","TEXTAREA","SELECT","DUAL_LIST_SELECT","isFilterable","isSortable","isSearchable","resolveProps","props","leftTitle","availableOptionsTitle","rightTitle","chosenOptionsTitle","availableOptionsActions","position","chosenOptionsActions","validatorMapperBridge","REQUIRED","PATTERN","MIN_LENGTH","URL","MAX_LENGTH","MIN_ITEMS","EXACT_LENGTH","FormTemplateWrapper","submitLabel","canReset","formProps","RenderForms","schemas","initialValues","setInitialValues","useState","Stack","hasGutter","map","i","StackItem","Card","CardBody","componentMapper","FormTemplate","onSubmit","formApi","initialize","validatorMapper","Skeleton","size","appId","defaultProps","getAppId","params","id","Applications","match","getSchema","getConfig","hasError","currApp","appName","frontend","title","isOrgAdmin","setIsOrgAdmin","undefined","useEffect","applicationReducer","notifications","auth","getUser","then","user","identity","is_org_admin","api","apiName","PageHeader","PageHeaderTitle","Main","NotAuthorized","serviceName","GET_CONFIG","versions","currVersion","GET_SCHEMA","appTitle","SAVE_VALUES","meta","fulfilled","variant","description","dismissable"],"sourceRoot":""}